#!/usr/bin/python

# sudo pip install pyusb==1.0.0b2
#
# Slow on OS X? See https://github.com/libusb/libusb/issues/108

WL_REQUEST_ECHO = 0
WL_REQUEST_COLOR = 1
WL_REQUEST_PAUSE = 2
WL_REQUEST_TRANSITION = 3
WL_REQUEST_HALT = 4
WL_REQUEST_RECORD = 5
WL_REQUEST_PLAY = 6
WL_REQUEST_STOP = 7
WL_REQUEST_SAVE = 8
WL_REQUEST_LOAD = 9
WL_REQUEST_EFFECT = 10
WL_REQUEST_RESET_WATCHDOG = 11
WL_REQUEST_SELECT_LEDS = 12
WL_REQUEST_SET_SERIAL = 64
WL_REQUEST_SET_WEBUSB_DESCRIPTOR_SET = 251
WL_REQUEST_RESET_DEVICE = 253
WL_REQUEST_WEBUSB = 254

from optparse import OptionParser
from sys import argv
import binascii
import os.path
import sys
import usb.core
import usb.util
import uuid

def ResetDevice(dev):
    try:
        dev.ctrl_transfer(0x40, WL_REQUEST_RESET_DEVICE, 0, 0)
    except:
        pass

def RegenerateSerial(dev):
    uuid_str = str(uuid.uuid4())
    b = bytearray()
    b.extend(uuid_str[-16:])

    try:
        result = dev.ctrl_transfer(0x40, WL_REQUEST_SET_SERIAL, 0, 0, b)
    except usb.core.USBError, e:
        print "Failed to set serial number", e
        sys.exit(1)
    if result != len(b):
        print "Unexpected result while setting serial number", result
        sys.exit(1)

    # Force an enumeration to grab the serial number again. This is
    # suboptimal because it causes a delay waiting for micronucleus,
    # but it's not a huge deal.
    ResetDevice(dev)

usage = "usage: %prog [options] rgbcolor [up to 15 more rgbcolor]"
parser = OptionParser(usage)
parser.add_option("-m", "--msec", default=500,
                  help="milliseconds between sequence steps")
parser.add_option("-e", "--effect", default=-1,
                  help="start an effect (0: candle)")
parser.add_option("-w", "--watchdog", default=-1,
                  help="reset the watchdog to the given number of seconds")
parser.add_option("-l", "--list", action="store_true", default=False,
                  help="list attached devices")
parser.add_option("-t", "--test", action="store_true", default=False,
                  help="test device")
parser.add_option("-9", "--stress", action="store_true", default=False,
                  help="stress-test device")
parser.add_option("-r", "--reset", action="store_true", default=False,
                  help="reset device")
parser.add_option("-u", "--urls", action="store_true", default=False,
                  help="set WebUSB urls (first landing page, then " +
                  "one or more allowed origins)")
parser.add_option("-s", "--serial",
                  help="specify the serial number of the device to address")
parser.add_option("-i", "--select-leds", default="all",
                  help="specify a bitmask of which LEDs to control, or 'all'")
parser.add_option("--regenerate-serial", action="store_true", default=False,
                  help="write a new serial number to the device")
parser.add_option("--save", action="store_true", default=False,
                  help="save the current sequence to EEPROM")
parser.add_option("--load", action="store_true", default=False,
                  help="load sequence from EEPROM")
parser.add_option("--play", action="store_true", default=False,
                  help="play the current sequence")
parser.add_option("--stop", action="store_true", default=False,
                  help="stop playing the current sequence")
parser.add_option("--vid", default="0x1209",
                  help="USB VID")
parser.add_option("--pid", default="0xa800", help="USB PID")

(options, args) = parser.parse_args()

VENDOR=int(options.vid, 16)
PRODUCT=int(options.pid, 16)

if options.list:
    devices = usb.core.find(idVendor=VENDOR, idProduct=PRODUCT, find_all=True)
    for dev in devices:
        print "%30s %16s" % (
            usb.util.get_string(dev, dev.iManufacturer) + " " +
            usb.util.get_string(dev, dev.iProduct),
            usb.util.get_string(dev, dev.iSerialNumber))
    sys.exit(0)

dev = None
if options.serial:
    devices = usb.core.find(idVendor=VENDOR, idProduct=PRODUCT, find_all=True)
    for d in devices:
        if usb.util.get_string(d, d.iSerialNumber) == options.serial:
            dev = d
            break
    if dev is None:
        print "Couldn't find that device"
        sys.exit(1)
else:
    dev = usb.core.find(idVendor=VENDOR, idProduct=PRODUCT)
if options.reset:
    if dev is None:
        sys.exit(0)
if dev is None:
    print 'No device is connected (%04x/%04x)' % (VENDOR, PRODUCT)
    sys.exit(1)

# bmRequestType
# USBRQ_DIR_HOST_TO_DEVICE | USBRQ_TYPE_VENDOR | USBRQ_RCPT_DEVICE = 0x40
# USBRQ_DIR_DEVICE_TO_HOST | USBRQ_TYPE_VENDOR | USBRQ_RCPT_DEVICE = 0xC0
# USBRQ_DIR_DEVICE_TO_HOST | USBRQ_TYPE_STANDARD | USBRQ_RCPT_DEVICE = 0x80
#
# bRequest = whatever you specified for your custom request
# wValue
# wIndex
# (optional) data

if options.regenerate_serial:
    RegenerateSerial(dev)
    sys.exit(0)

if options.reset:
    ResetDevice(dev)
    sys.exit(0)

if options.test:
    result = dev.ctrl_transfer(0xC0, WL_REQUEST_ECHO, 0x55aa, 0x9944, 4)
    if (result[0] == 0xaa and
        result[1] == 0x55 and
        result[2] == 0x44 and
        result[3] == 0x99):
        print "Test succeeded"
        sys.exit(0)
    else:
        print "Test failed:", result
        sys.exit(1)

if options.save:
  result = dev.ctrl_transfer(0x40, WL_REQUEST_SAVE, 0, 0, None)
  if result != 0:
    raise IOError('Error', result)
    sys.exit(1)
  sys.exit(0)

if options.load:
  result = dev.ctrl_transfer(0x40, WL_REQUEST_LOAD, 0, 0, None)
  if result != 0:
    raise IOError('Error', result)
    sys.exit(1)
  sys.exit(0)

if options.play:
  result = dev.ctrl_transfer(0x40, WL_REQUEST_PLAY, 0, 0, None)
  if result != 0:
    raise IOError('Error', result)
    sys.exit(1)
  sys.exit(0)

if options.stop:
  result = dev.ctrl_transfer(0x40, WL_REQUEST_STOP, 0, 0, None)
  if result != 0:
    raise IOError('Error', result)
    sys.exit(1)
  sys.exit(0)

effect = int(options.effect)
if effect >= 0:
  result = dev.ctrl_transfer(0x40, WL_REQUEST_EFFECT, effect, 0, None)
  if result != 0:
    raise IOError('Error', result)
    sys.exit(1)
  sys.exit(0)

watchdog = int(options.watchdog)
if watchdog >= 0:
  result = dev.ctrl_transfer(0x40, WL_REQUEST_RESET_WATCHDOG,
                             watchdog, 0, None)
  if result != 0:
    raise IOError('Error', result)
    sys.exit(1)
  sys.exit(0)

def set_urls(urls):
  num_urls = len(urls)
  b = bytearray()
  b.extend(bytearray([num_urls + 5, 0, num_urls + 5, 0, 0]))
  n = 1
  for u in urls:
    b.extend(bytearray([n]))
    n += 1

  for u in urls:
    if u.startswith("http://"):
      scheme = 0
      u = u[7:]
    elif u.startswith("https://"):
      scheme = 1
      u = u[8:]
    else:
      print "Unrecognized scheme", u
      sys.exit(1)

    b.extend(bytearray([len(u) + 3, 3, scheme]))
    b.extend(u)

  if len(b) > 128:
    print "Allowed origin lengths too big"
    sys.exit(1)

  try:
    result = dev.ctrl_transfer(0x40, WL_REQUEST_SET_WEBUSB_DESCRIPTOR_SET,
                               0, 0, b)
    print "Updated WEBUSB_DESCRIPTOR_SET", result
  except usb.core.USBError, e:
    print "Failed to set WEBUSB_DESCRIPTOR_SET", e
    sys.exit(1)
  if result != len(b):
    print "Unexpected result while setting WEBUSB_DESCRIPTOR_SET", result
    sys.exit(1)

if options.urls:
  if len(args) < 2:
    parser.print_usage()
    sys.exit(1)
  set_urls(args)
  sys.exit(0)

if options.stress:
  import os
  import time

  print "Press control-c to stop."
  count = 0
  start_time = time.clock()
  while True:
    bytes = bytearray(os.urandom(3))
    count += 1
    elapsed = 10 * (time.clock() - start_time)
    try:
      result = dev.ctrl_transfer(0x40, WL_REQUEST_COLOR, 0, 0, bytes)
    except usb.core.USBError, e:
      print "\n\nFailed @ %d, %0.1f with %s" % (count, elapsed, e)
      break
    sys.stdout.write("\rIterations: %10d  Time: %10.1f" % (count, elapsed))
    sys.stdout.flush()
  sys.exit(0)

if options.select_leds:
  if options.select_leds == 'all':
    options.select_leds = 0xFFFF;  # SELECT_ALL_LEDS
  else:
    options.select_leds = int(options.select_leds[2:], 16) \
      if options.select_leds.startswith('0x') \
      else reduce(int.__or__,
              [1<<int(x) for x in options.select_leds.split(',')])
  select_leds_as_hex_mask = "%0.4X" % options.select_leds
  bytes = binascii.unhexlify(select_leds_as_hex_mask[-4:])
  result = dev.ctrl_transfer(0x40, WL_REQUEST_SELECT_LEDS, 0, 0, bytes)
  if result != len(bytes):
    raise IOError('Error', result)

if len(args) == 0:
  parser.print_usage()
  sys.exit(1)

if len(args) == 1:
  command = WL_REQUEST_COLOR
  bytes = binascii.unhexlify(args[0])
  
  if len(bytes) < 4:
    raise ValueError(('4 bytes required only got ', len(bytes), bytes))

  result = dev.ctrl_transfer(0x40, command, 0, 0, bytes)

  if result != len(bytes):
    raise IOError('Error', result)
else:
  result = dev.ctrl_transfer(0x40, WL_REQUEST_RECORD, 0, 0, None)
  if result != 0:
    raise IOError('Error', result)

  msec = int(options.msec)
  for arg in args:
    bytes = binascii.unhexlify(arg)
    
    if len(bytes) < 4:
      raise ValueError("4 bytes required only got %s", len(bytes))

     result = dev.ctrl_transfer(0x40, WL_REQUEST_COLOR, 0, 0, bytes)
     if result != len(bytes):
       raise IOError('Error: expected %d but got %d' % (len(bytes), result))
     bytes = bytearray([(msec >> 8) & 0xff, msec & 0xff])
     result = dev.ctrl_transfer(0x40, WL_REQUEST_PAUSE, 0, 0, bytes)
     if result != len(bytes):
       raise IOError('Error', result)

   result = dev.ctrl_transfer(0x40, WL_REQUEST_PLAY, 0, 0, None)
   if result != 0:
     raise IOError('Error', result)
